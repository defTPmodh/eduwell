datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  moods         Mood[]
  activities    Activity[]
  meditations   MeditationSession[]
  activityLogs  ActivityLog[]
}

model Mood {
  id        String   @id @default(cuid())
  userId    String
  mood      Int
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  type      String
  duration  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model MeditationSession {
  id        String   @id @default(cuid())
  userId    String
  type      String
  duration  Int
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  type      String // 'meditation', 'breathing', 'chat', etc.
  details   Json? // Store additional details as JSON
  duration  Int? // Duration in minutes (if applicable)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}
